{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":102966,"databundleVersionId":12412856,"isSourceIdPinned":false,"sourceType":"competition"},{"sourceId":11934083,"sourceType":"datasetVersion","datasetId":7502983},{"sourceId":11934820,"sourceType":"datasetVersion","datasetId":7503444}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# üß™ Soil Type Classification using ResNet18 Features + PCA + Random Forest\nIn this notebook, we tackle the Soil Classification task using a hybrid approach:\n\n1. Extract deep features using a pretrained ResNet18,\n\n2. Apply PCA for dimensionality reduction,\n\n3. Use a Random Forest classifier for final predictions.","metadata":{}},{"cell_type":"markdown","source":"# üìö 1. Libraries and Setup","metadata":{}},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom PIL import Image\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nimport torch\nimport torch.nn as nn\nimport torchvision.transforms as transforms\nimport torchvision.models as models","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-24T20:32:03.044925Z","iopub.execute_input":"2025-05-24T20:32:03.045353Z","iopub.status.idle":"2025-05-24T20:32:03.598609Z","shell.execute_reply.started":"2025-05-24T20:32:03.045320Z","shell.execute_reply":"2025-05-24T20:32:03.596980Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"# üìÇ 2. Define Paths & Read Data","metadata":{}},{"cell_type":"code","source":"# üîç Paths\ntrain_csv = \"/kaggle/input/soil-classification-part-2/soil_competition-2025/train_labels.csv\"\ntest_csv = \"/kaggle/input/soil-classification-part-2/soil_competition-2025/test_ids.csv\"\ntrain_img_dir = \"/kaggle/input/soil-classification-part-2/soil_competition-2025/train\"\ntest_img_dir = \"/kaggle/input/soil-classification-part-2/soil_competition-2025/test\"\n\n# üìñ Read Data\ntrain_df = pd.read_csv(train_csv)\ntest_df = pd.read_csv(test_csv)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-24T20:32:03.600649Z","iopub.execute_input":"2025-05-24T20:32:03.601015Z","iopub.status.idle":"2025-05-24T20:32:03.618995Z","shell.execute_reply.started":"2025-05-24T20:32:03.600983Z","shell.execute_reply":"2025-05-24T20:32:03.616905Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"# üíª 3. Setup Device and Image Transform","metadata":{}},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\ntransform = transforms.Compose([\n    transforms.Resize((224, 224)),\n    transforms.ToTensor(),\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-24T20:32:03.620483Z","iopub.execute_input":"2025-05-24T20:32:03.620901Z","iopub.status.idle":"2025-05-24T20:32:03.638847Z","shell.execute_reply.started":"2025-05-24T20:32:03.620868Z","shell.execute_reply":"2025-05-24T20:32:03.636944Z"}},"outputs":[],"execution_count":4},{"cell_type":"markdown","source":"# üß† 4. Load Pretrained ResNet18 for Feature Extraction","metadata":{}},{"cell_type":"code","source":"# Load pretrained ResNet18 model\nresnet = models.resnet18(weights=models.ResNet18_Weights.DEFAULT)\n\n# Remove final classification layer\nresnet.fc = nn.Identity()\nresnet = resnet.to(device)\nresnet.eval()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-24T20:32:03.641345Z","iopub.execute_input":"2025-05-24T20:32:03.641757Z","iopub.status.idle":"2025-05-24T20:32:03.909076Z","shell.execute_reply.started":"2025-05-24T20:32:03.641730Z","shell.execute_reply":"2025-05-24T20:32:03.907594Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"ResNet(\n  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (relu): ReLU(inplace=True)\n  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n  (layer1): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer2): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer3): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer4): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n  (fc): Identity()\n)"},"metadata":{}}],"execution_count":5},{"cell_type":"markdown","source":"# üß¨ 5. Define Feature Extraction Function","metadata":{}},{"cell_type":"code","source":"def extract_features(image_ids, folder):\n    features = []\n    for img_id in tqdm(image_ids):\n        img_path = os.path.join(folder, img_id)\n        image = Image.open(img_path).convert(\"RGB\")\n        image = transform(image).unsqueeze(0).to(device)\n\n        with torch.no_grad():\n            feat = resnet(image).cpu().numpy().squeeze()\n        features.append(feat)\n\n    return np.array(features)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-24T20:32:03.909911Z","iopub.execute_input":"2025-05-24T20:32:03.910171Z","iopub.status.idle":"2025-05-24T20:32:03.918105Z","shell.execute_reply.started":"2025-05-24T20:32:03.910148Z","shell.execute_reply":"2025-05-24T20:32:03.916958Z"}},"outputs":[],"execution_count":6},{"cell_type":"markdown","source":"# üß™ 6. Extract Features from Train Images","metadata":{}},{"cell_type":"code","source":"X = extract_features(train_df[\"image_id\"], train_img_dir)\ny = train_df[\"label\"].values","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-24T20:32:03.919394Z","iopub.execute_input":"2025-05-24T20:32:03.919722Z","iopub.status.idle":"2025-05-24T20:33:28.653791Z","shell.execute_reply.started":"2025-05-24T20:32:03.919692Z","shell.execute_reply":"2025-05-24T20:33:28.652524Z"}},"outputs":[{"name":"stderr","text":"100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 1222/1222 [01:24<00:00, 14.43it/s]\n","output_type":"stream"}],"execution_count":7},{"cell_type":"markdown","source":"# ‚úÇÔ∏è 7. Train-Validation Split","metadata":{}},{"cell_type":"code","source":"X_train, X_val, y_train, y_val = train_test_split(\n    X, y, test_size=0.2, random_state=42, stratify=y\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-24T20:33:28.654765Z","iopub.execute_input":"2025-05-24T20:33:28.655084Z","iopub.status.idle":"2025-05-24T20:33:28.664467Z","shell.execute_reply.started":"2025-05-24T20:33:28.655054Z","shell.execute_reply":"2025-05-24T20:33:28.663151Z"}},"outputs":[],"execution_count":8},{"cell_type":"markdown","source":"# üìâ 8. Dimensionality Reduction with PCA","metadata":{}},{"cell_type":"code","source":"pca = PCA(n_components=100)\nX_train_pca = pca.fit_transform(X_train)\nX_val_pca = pca.transform(X_val)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-24T20:33:28.665715Z","iopub.execute_input":"2025-05-24T20:33:28.666127Z","iopub.status.idle":"2025-05-24T20:33:28.838183Z","shell.execute_reply.started":"2025-05-24T20:33:28.666084Z","shell.execute_reply":"2025-05-24T20:33:28.837182Z"}},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"# üå≤ 9. Train Random Forest Classifier","metadata":{}},{"cell_type":"code","source":"clf = RandomForestClassifier(n_estimators=200, random_state=42)\nclf.fit(X_train_pca, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-24T20:33:28.839226Z","iopub.execute_input":"2025-05-24T20:33:28.839523Z","iopub.status.idle":"2025-05-24T20:33:29.186178Z","shell.execute_reply.started":"2025-05-24T20:33:28.839500Z","shell.execute_reply":"2025-05-24T20:33:29.184648Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(n_estimators=200, random_state=42)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=200, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=200, random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":10},{"cell_type":"markdown","source":"# üìä 10. Evaluate on Validation Set","metadata":{}},{"cell_type":"code","source":"val_preds = clf.predict(X_val_pca)\nf1_per_class = f1_score(y_val, val_preds, average=None)\n\nprint(\"F1 scores by class:\", f1_per_class)\nprint(\"Minimum F1:\", f1_per_class.min())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-24T20:33:29.189133Z","iopub.execute_input":"2025-05-24T20:33:29.189470Z","iopub.status.idle":"2025-05-24T20:33:29.219925Z","shell.execute_reply.started":"2025-05-24T20:33:29.189443Z","shell.execute_reply":"2025-05-24T20:33:29.218856Z"}},"outputs":[{"name":"stdout","text":"F1 scores by class: [1.]\nMinimum F1: 1.0\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"# üß™ 11. Extract Test Features and Predict","metadata":{}},{"cell_type":"code","source":"X_test = extract_features(test_df[\"image_id\"], test_img_dir)\nX_test_pca = pca.transform(X_test)\ntest_preds = clf.predict(X_test_pca)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-24T20:33:29.222358Z","iopub.execute_input":"2025-05-24T20:33:29.223162Z","iopub.status.idle":"2025-05-24T20:34:29.156778Z","shell.execute_reply.started":"2025-05-24T20:33:29.222821Z","shell.execute_reply":"2025-05-24T20:34:29.155641Z"}},"outputs":[{"name":"stderr","text":"100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 967/967 [00:59<00:00, 16.14it/s]\n","output_type":"stream"}],"execution_count":12},{"cell_type":"markdown","source":"# üì§ 12. Generate Submission File","metadata":{}},{"cell_type":"code","source":"submission = pd.DataFrame({\n    \"image_id\": test_df[\"image_id\"],\n    \"label\": test_preds\n})\nsubmission.to_csv(\"submission.csv\", index=False)\nprint(\"‚úÖ submission.csv generated successfully.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-24T20:34:29.157605Z","iopub.execute_input":"2025-05-24T20:34:29.157953Z","iopub.status.idle":"2025-05-24T20:34:29.181224Z","shell.execute_reply.started":"2025-05-24T20:34:29.157923Z","shell.execute_reply":"2025-05-24T20:34:29.178472Z"}},"outputs":[{"name":"stdout","text":"‚úÖ submission.csv generated successfully.\n","output_type":"stream"}],"execution_count":13}]}